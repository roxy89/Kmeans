/*
Permette di suddividere un insieme di oggetti in K gruppi sulla base dei loro attributi. 
il cui obiettivo è determinare i K gruppi di dati generati da distribuzioni gaussiane.
L'obiettivo che l'algoritmo si prepone è di minimizzare la varianza totale intra-cluster. 
Ogni cluster viene identificato mediante un centroide o punto medio. 
L'algoritmo segue una procedura iterativa. 
Inizialmente crea K partizioni e assegna ad ogni partizione i punti d'ingresso
o casualmente o usando alcune informazioni euristiche. 
Quindi calcola il centroide di ogni gruppo. 
Costruisce quindi una nuova partizione associando ogni punto d'ingresso al cluster il cui centroide 
è più vicino ad esso. 
Quindi vengono ricalcolati i centroidi per i nuovi cluster e così via,
finché l'algoritmo non converge.
 */ 


//BUONO
package kmeans2;

/**
 *
 * @author RoXy
 */
import static java.lang.Math.abs;
import   java . util . ArrayList ; 
 import   java . util . Collections ; 
 import   java . util . Scanner ; 
 
 public   class   KMean   { 
 
     int   k ; //gruppi da creare
     int   noOfItems ; //valori da inserire
     ArrayList <Integer>   dataItems ; //valori
     ArrayList <Integer>   cz ; //centroide
     ArrayList <Integer>   oldCz ; 
     ArrayList <Integer>   row ; 
     ArrayList < ArrayList <Integer> >groups ; //gruppi
     Scanner input ; 
 
     public   KMean ( int   k ,   int   noOfItems )   { 
         this.k= k ; 
         this.noOfItems= noOfItems ; 
         dataItems=   new   ArrayList <> ( ) ; 
         cz= new ArrayList <> ( ) ; 
         oldCz = new ArrayList <> ( ) ; 
         row= new ArrayList <> ( ) ; 
         groups= new ArrayList <> ( ) ; 
         input= new Scanner ( System . in ) ; 
 
         for(int i=0;i<k;i ++ ){ 
             groups.add(new ArrayList <> ()); 
         } 
 
         for   (int i=0;i<noOfItems;i++ )   { 
             System.out.println( "Inserisci i valori: "   +(i+1)+   " item inserito" ) ; 
             dataItems.add (input.nextInt()) ; 
             if   ( i<k )   { 
                 cz.add (dataItems.get(i)) ; 
                 System.out.println( "C"+(i+1)+" è "+cz.get(i)); 
             } 
         } 
         int iter=1 ; 
         do   { 
             for(int aItem : dataItems)   { 
                 for   ( int c : cz )   { 
                     row.add (abs( c-aItem)) ; 
                 } 
                 groups.get( row.indexOf ( Collections.min(row))).add(aItem); 
                 row.removeAll (row); 
             } 
             for   (int i=0;i<k ;i++ )   { 
                 if   ( iter   ==   1 )   { 
                     oldCz.add(cz.get(i)); 
                 }   else   { 
                     oldCz.set(i,cz.get(i)) ; 
                 } 
                 if   (!groups.get(i).isEmpty()){ 
                     cz.set(i ,media(groups.get(i))); 
                 } 
             } 
             if   ( !cz.equals(oldCz))   { 
                 for   (int i=0 ;i<groups.size();i ++ )   { 
                     groups.get(i).removeAll(groups.get(i)); 
                 } 
             } 
             iter ++ ; 
         }   while (!cz.equals(oldCz)); 
         for   ( int i=0 ;i<cz.size();i ++ )   { 
             System.out.println( "Centroide"+(i+1)+" "+cz.get(i)); 
         } 
         for   ( int i =0;i<groups.size();i ++ )   { 
             System.out.println ( "Gruppo "+( i+1)); 
             System.out.println ( groups.get(i).toString()); 
         } 
         System.out.println( "Numero di iterazioni: "  +iter ) ; 
     } 
 
     public   static   void   main ( String [ ]   args )   { 
         Scanner  input   =   new   Scanner ( System . in ) ; 
         System . out . println ( "Inserisci i gruppi (k)" ) ; 
         int   k   =   input.nextInt ( ) ; 
         System.out.println ( "Inserisci il numero dei valori" ) ; 
         int   noOfItems   =   input.nextInt ( ) ; 
         new   KMean ( k ,noOfItems ) ; 
     } 
 
     public   static   int   media ( ArrayList <Integer>   list )   { 
         int   sum   =   0 ; 
         for   ( Integer value   :   list )   { 
             sum  = sum + value ; 
         } 
         return   sum/list . size ( ) ; 
     } 
 } 
